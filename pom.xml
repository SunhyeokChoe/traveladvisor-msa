<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <developers>
        <developer>
            <id>SunhyeokChoe</id>
            <name>Sunhyeok Choe</name>
            <email>sunhyeokchoe@gmail.com</email>
            <organization>GitHub</organization>
            <organizationUrl>https://github.com/SunhyeokChoe</organizationUrl>
            <roles>
                <role>Maintainer</role>
                <role>Developer</role>
            </roles>
            <timezone>+9</timezone>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>https://opensource.org/licenses/MIT</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <groupId>com.traveladvisor</groupId>
    <artifactId>traveladvisor</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>traveladvisor</name>
    <description>traveladvisor</description>

    <!--
         이 pom.xml 은 모든 서브 모듈의 Root 즉, 메인 프로젝트의 pom 입니다.
         소스 코드가 없고, 모듈들을 묶는 역할을 하므로 jar가 아닌 pom 으로
         설정해 모든 서브 모듈들의 상위 pom으로 사용합니다.
    -->
    <packaging>pom</packaging>

    <modules>
        <module>memberserver</module>
        <module>common</module>
        <module>paymentserver</module>
        <module>configserver</module>
        <module>gatewayserver</module>
        <module>booknigserver</module>
        <module>hotelserver</module>
    </modules>

    <repositories>
        <!-- Kafka Avro Serializer 종속성을 사용하기 위해 Confluent 저장소를 추가했습니다. -->
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
        </repository>
    </repositories>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.4</version>
        <relativePath/>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>17</java.version>
        <spring-cloud.version>2023.0.3</spring-cloud.version>
        <springdoc.version>2.6.0</springdoc.version>
        <openTelemetry.version>1.33.5</openTelemetry.version>
        <maven-compiler-plugin.version>3.9.0</maven-compiler-plugin.version>
        <jib-maven-plugin.version>3.4.2</jib-maven-plugin.version>
        <google-guava.version>33.3.1-jre</google-guava.version>
        <avro.version>1.11.0</avro.version>
        <kafka-avro-serializer.version>7.0.1</kafka-avro-serializer.version>
    </properties>

    <!-- 하위 모듈들에서 각 의존성의 버전을 지정하지 않아도 사용할 수 있도록 Parent에서 버전을 명시 합니다. -->
    <dependencyManagement>
        <dependencies>
            <!-- BEGIN: Spring Cloud BOM -->
            <!-- spring-cloud-dependencies BOM을 통해 spring-cloud-starter-* 로 시작하는 의존성들의 버전을 한 곳에서 관리합니다. -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- END: Spring Cloud BOM -->

            <!-- BEGIN: common -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>common-domain</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>common-application</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>common-datasource</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>common-message</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: common -->

            <!-- BEGIN: batch microservice -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>batch-application-service</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>batch-domain-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>batch-application</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>batch-datasource</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>batch-message</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: batch microservice -->

            <!-- BEGIN: booking microservice -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>booking-application-service</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>booking-domain-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>booking-application</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>booking-datasource</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>booking-message</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: booking microservice -->

            <!-- BEGIN: member microservice -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>member-application-service</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>member-domain-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>member-application</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>member-datasource</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>member-message</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: member microservice -->

            <!-- BEGIN: payment microservice -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>payment-application-service</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>payment-domain-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>payment-application</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>payment-datasource</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>payment-message</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: payment microservice -->

            <!-- BEGIN: hotel microservice -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>hotel-application-service</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>hotel-domain-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>hotel-application</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>hotel-datasource</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>hotel-message</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: hotel microservice -->

            <!-- BEGIN: config microservice -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>configserver</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: config microservice -->

            <!-- BEGIN: gateway microservice -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>gatewayserver</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: gateway microservice -->

            <!-- BEGIN: kafka -->
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>kafka-config</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>kafka-model</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>kafka-producer</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.traveladvisor</groupId>
                <artifactId>kafka-consumer</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- END: kafka -->
        </dependencies>
    </dependencyManagement>

    <!-- 전체 마이크로서비스에서 사용할 공통 의존성 -->
    <dependencies>
        <!-- 용도: Google Guava 유틸리티 벨트 활용 -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${google-guava.version}</version>
        </dependency>

        <!-- 용도: REST API 문서화 -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>

        <!-- 용도: 각 마이크로서비스의 지표 수집 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!--
            용도: 각 마이크로서비스의 지표 수집
            오픈 텔레메트리 자바 에이전트로, 들어오는 HTTP 요청, DB 쿼리, 외부 API 호출 등을 자동으로 추적해 마이크로서비스 간의 요청 흐름을 추적 가능하게 해줍니다.
            또한 마이크로서비스 간 통신의 지연 시간도 파악 가능합니다.
            거기에 더해 JVM 메트릭(메모리 사용량, GC 활동 등), 시스템 메트릭(CPU 사용률, 메모리 등), 애플리케이션 성능 등의 메트릭을 수집합니다.
         -->
        <dependency>
            <groupId>io.opentelemetry.javaagent</groupId>
            <artifactId>opentelemetry-javaagent</artifactId>
            <version>${openTelemetry.version}</version>
            <!--
                수집 대상이 되는 지표는 런타임에 생성되므로 스코프로 runtime 을 명시합니다.
                오픈 텔레메트리는 컴파일 시점에 필요하지 않습니다. 개발자가 직접 코드에서 오픈 텔레메트리 API를 호출하지 않기 때문입니다.
                오픈 텔레메트리 Java Agent는 JVM 실행 시점에 바이트코드를 조작합니다.
                런타임 시점에 필요하므로 runtime 스코프로 설정했습니다. 그럼 자동으로 컴파일 classpath에서 제외됩니다.
            -->
            <scope>runtime</scope>
        </dependency>

        <!-- 용도: 각 마이크로서비스의 지표를 Prometheus가 이해할 수 있는 지표로 변환 -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>

        <!-- 용도: POJO에서 반복되는 코드 제거 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- 용도: 로깅 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <!-- 개발 환경(default) 프로파일일 경우 DevTools 의존성을 포함시킵니다. 즉, 개발 환경에서만 Hot Reload 기능을 사용하도록 합니다. -->
        <profile>
            <id>default</id>
            <activation>
                <property>
                    <name>spring.profiles.active</name>
                    <value>default</value>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-devtools</artifactId>
                    <scope>runtime</scope>
                    <optional>true</optional>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>17</release>
                </configuration>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.google.cloud.tools</groupId>
                    <artifactId>jib-maven-plugin</artifactId>
                    <version>${jib-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <!-- mvn package 시점에 jib dockerBuild를 트리거합니다. -->
                                <!-- dockerBuild: 로컬 저장소에 이미지 저장 -->
                                <!-- build: 원격 저장소에 이미지 저장 -->
                                <goal>dockerBuild</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>
