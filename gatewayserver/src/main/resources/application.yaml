server:
  port: 8072

spring:
  application:
    name: "gatewayserver"
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    gateway:
      httpclient:
        connect-timeout: 1000
        response-timeout: 10s
    kubernetes:
      discovery:
        # 게이트웨이 서버는 discovery.enabled를 true로 설정합니다.
        # 이는 게이트웨이 서버가 K8s Discovery Server를 통해 클러스터 내에서 사용 가능한
        # 다른 마이크로서비스를 찾아 요청을 포워딩할 수 있도록 하기 위한 설정입니다.
        enabled: true
        all-namespaces: true
    # Spring Cloud에서 제공하는 디스커버리 클라이언트 정의입니다.
    discovery:
      client:
        # 유레카 디스커버리 클라이언트를 사용하면 자동으로 health indicator가 생성되는데, 이는 health-indicator.enabled가 디폴트로 true로 설정되기 때문입니다.
        # 그러나 쿠버네티스 디스커버리 클라이언트 역할을 하는 게이트웨이 서버에서는 health indicator를 사용하지 않기 때문에 false로 설정합니다. 디폴트 true 설정 그대로 두면 에러가 발생할 수 있습니다.
        health-indicator:
          enabled: false
  security:
    oauth2:
      resourceserver:
        jwt:
          # KeyCloak 인증 서버의 certs 정보가 노출되는 URI 입니다.
          # KeyCloak 어드민 페이지에서 Realm settings -> OpenID Endpoint Configuration 클릭하면 jwks_uri 의 값을 볼 수 있습니다.
          # 리소스 서버 역할을 하는 게이트웨이 엣지 서버가 이 certs 정보를 KeyCloak 인증 서버로부터 전달 받고
          # 클라이언트로부터 요청이 들어왔을 때 액세스 토큰이 유효한지 검증할 수 있습니다.
          # 만약 유효하지 않은 경우 인증 서버에 액세스 토큰 생성을 요청하며, 인증 서버는 액세스 토큰을 생성할 때 개인 키로 디지털 서명을 합니다.
          # 클라이언트로부터 다음 요청이 왔을 때 디지털 서명이 유효한지 검증하기 위해 certs 정보를 활용해 검증합니다.
          # 여기서 JWT의 장점 중 하나인 "자체 검증 가능"으로 인해 리소스 서버는 모든 요청에 대해 인증 서버와 매번 연결하지 않고도 모든 액세스 토큰을 검증할 수 있게 됩니다.
          # 반대로 Opaque 토큰 방식의 인증을 채택했다면 리소스 서버는 모든 리소스 요청에 대해 토큰이 유효한지에 대한 자체 판단을 하지 못하고 인증 서버에 인증 요청을 매번 보내게 될 것입니다.
          # Opaque 토큰이 단점만 있는 것은 아니니 한 번 공부해 보시는 것도 추천 드립니다.
          jwk-set-uri: "http://localhost:8080/realms/master/protocol/openid-connect/certs"
  data:
    redis:
      connect-timeout: 3s
      host: localhost
      port: 6379
      timeout: 1s
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

info:
  app:
    name: "gatewayserver"
    description: "Travel Advisor Gateway Server Application"
    version: "1.0.0"

logging:
  level:
    com:
      traveladvisor:
        gatewayserver: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
